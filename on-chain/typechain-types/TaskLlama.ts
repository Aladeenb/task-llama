/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TaskLlama {
  export type TaskStruct = {
    id: BigNumberish;
    description: string;
    reward: BigNumberish;
    testCases: string[];
    expiry: BigNumberish;
    creator: AddressLike;
    assignedAgent: AddressLike;
    completed: boolean;
    verified: boolean;
    category: BigNumberish;
  };

  export type TaskStructOutput = [
    id: bigint,
    description: string,
    reward: bigint,
    testCases: string[],
    expiry: bigint,
    creator: string,
    assignedAgent: string,
    completed: boolean,
    verified: boolean,
    category: bigint
  ] & {
    id: bigint;
    description: string;
    reward: bigint;
    testCases: string[];
    expiry: bigint;
    creator: string;
    assignedAgent: string;
    completed: boolean;
    verified: boolean;
    category: bigint;
  };
}

export interface TaskLlamaInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "agentAddresses"
      | "agents"
      | "assignAgent"
      | "completeTask"
      | "createTask"
      | "depositFunds"
      | "getAgentCompletedTasks"
      | "getAgentCompletedTasksCount"
      | "getAgentOwner"
      | "getAgentTasksByCategory"
      | "getCategories"
      | "getLeaderboard"
      | "getTasks"
      | "registerAgent"
      | "tasks"
      | "verifyTask"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentAssigned"
      | "AgentRegistered"
      | "TaskCompleted"
      | "TaskCreated"
      | "TaskVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "agentAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "agents", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "assignAgent",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTask",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTask",
    values: [string, BigNumberish, string[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentCompletedTasks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentCompletedTasksCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentTasksByCategory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderboard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTasks", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "tasks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "verifyTask",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "agentAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assignAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentCompletedTasks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentCompletedTasksCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentTasksByCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTasks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyTask", data: BytesLike): Result;
}

export namespace AgentAssignedEvent {
  export type InputTuple = [taskId: BigNumberish, agent: AddressLike];
  export type OutputTuple = [taskId: bigint, agent: string];
  export interface OutputObject {
    taskId: bigint;
    agent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentRegisteredEvent {
  export type InputTuple = [agent: AddressLike];
  export type OutputTuple = [agent: string];
  export interface OutputObject {
    agent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskCompletedEvent {
  export type InputTuple = [
    taskId: BigNumberish,
    agent: AddressLike,
    reward: BigNumberish
  ];
  export type OutputTuple = [taskId: bigint, agent: string, reward: bigint];
  export interface OutputObject {
    taskId: bigint;
    agent: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskCreatedEvent {
  export type InputTuple = [
    taskId: BigNumberish,
    description: string,
    reward: BigNumberish,
    expiry: BigNumberish,
    category: BigNumberish
  ];
  export type OutputTuple = [
    taskId: bigint,
    description: string,
    reward: bigint,
    expiry: bigint,
    category: bigint
  ];
  export interface OutputObject {
    taskId: bigint;
    description: string;
    reward: bigint;
    expiry: bigint;
    category: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskVerifiedEvent {
  export type InputTuple = [taskId: BigNumberish, verifier: AddressLike];
  export type OutputTuple = [taskId: bigint, verifier: string];
  export interface OutputObject {
    taskId: bigint;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TaskLlama extends BaseContract {
  connect(runner?: ContractRunner | null): TaskLlama;
  waitForDeployment(): Promise<this>;

  interface: TaskLlamaInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agentAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  agents: TypedContractMethod<
    [arg0: AddressLike],
    [[string, string] & { agentAddress: string; ownerAddress: string }],
    "view"
  >;

  assignAgent: TypedContractMethod<
    [_taskId: BigNumberish, _agent: AddressLike],
    [void],
    "nonpayable"
  >;

  completeTask: TypedContractMethod<
    [agentAddress: AddressLike, _taskId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createTask: TypedContractMethod<
    [
      _description: string,
      _reward: BigNumberish,
      _testCases: string[],
      _expiry: BigNumberish,
      _category: BigNumberish
    ],
    [void],
    "payable"
  >;

  depositFunds: TypedContractMethod<[], [void], "payable">;

  getAgentCompletedTasks: TypedContractMethod<
    [_agent: AddressLike],
    [TaskLlama.TaskStructOutput[]],
    "view"
  >;

  getAgentCompletedTasksCount: TypedContractMethod<
    [_agent: AddressLike],
    [bigint],
    "view"
  >;

  getAgentOwner: TypedContractMethod<[_agent: AddressLike], [string], "view">;

  getAgentTasksByCategory: TypedContractMethod<
    [_agent: AddressLike, _category: BigNumberish],
    [TaskLlama.TaskStructOutput[]],
    "view"
  >;

  getCategories: TypedContractMethod<[], [bigint[]], "view">;

  getLeaderboard: TypedContractMethod<
    [_category: BigNumberish],
    [string[]],
    "view"
  >;

  getTasks: TypedContractMethod<[], [TaskLlama.TaskStructOutput[]], "view">;

  registerAgent: TypedContractMethod<
    [_agentAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  tasks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        string,
        string,
        boolean,
        boolean,
        bigint
      ] & {
        id: bigint;
        description: string;
        reward: bigint;
        expiry: bigint;
        creator: string;
        assignedAgent: string;
        completed: boolean;
        verified: boolean;
        category: bigint;
      }
    ],
    "view"
  >;

  verifyTask: TypedContractMethod<
    [_taskId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agentAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "agents"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, string] & { agentAddress: string; ownerAddress: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "assignAgent"
  ): TypedContractMethod<
    [_taskId: BigNumberish, _agent: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "completeTask"
  ): TypedContractMethod<
    [agentAddress: AddressLike, _taskId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTask"
  ): TypedContractMethod<
    [
      _description: string,
      _reward: BigNumberish,
      _testCases: string[],
      _expiry: BigNumberish,
      _category: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositFunds"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getAgentCompletedTasks"
  ): TypedContractMethod<
    [_agent: AddressLike],
    [TaskLlama.TaskStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentCompletedTasksCount"
  ): TypedContractMethod<[_agent: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAgentOwner"
  ): TypedContractMethod<[_agent: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAgentTasksByCategory"
  ): TypedContractMethod<
    [_agent: AddressLike, _category: BigNumberish],
    [TaskLlama.TaskStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCategories"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getLeaderboard"
  ): TypedContractMethod<[_category: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTasks"
  ): TypedContractMethod<[], [TaskLlama.TaskStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "registerAgent"
  ): TypedContractMethod<[_agentAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tasks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        string,
        string,
        boolean,
        boolean,
        bigint
      ] & {
        id: bigint;
        description: string;
        reward: bigint;
        expiry: bigint;
        creator: string;
        assignedAgent: string;
        completed: boolean;
        verified: boolean;
        category: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyTask"
  ): TypedContractMethod<[_taskId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AgentAssigned"
  ): TypedContractEvent<
    AgentAssignedEvent.InputTuple,
    AgentAssignedEvent.OutputTuple,
    AgentAssignedEvent.OutputObject
  >;
  getEvent(
    key: "AgentRegistered"
  ): TypedContractEvent<
    AgentRegisteredEvent.InputTuple,
    AgentRegisteredEvent.OutputTuple,
    AgentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "TaskCompleted"
  ): TypedContractEvent<
    TaskCompletedEvent.InputTuple,
    TaskCompletedEvent.OutputTuple,
    TaskCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TaskCreated"
  ): TypedContractEvent<
    TaskCreatedEvent.InputTuple,
    TaskCreatedEvent.OutputTuple,
    TaskCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TaskVerified"
  ): TypedContractEvent<
    TaskVerifiedEvent.InputTuple,
    TaskVerifiedEvent.OutputTuple,
    TaskVerifiedEvent.OutputObject
  >;

  filters: {
    "AgentAssigned(uint256,address)": TypedContractEvent<
      AgentAssignedEvent.InputTuple,
      AgentAssignedEvent.OutputTuple,
      AgentAssignedEvent.OutputObject
    >;
    AgentAssigned: TypedContractEvent<
      AgentAssignedEvent.InputTuple,
      AgentAssignedEvent.OutputTuple,
      AgentAssignedEvent.OutputObject
    >;

    "AgentRegistered(address)": TypedContractEvent<
      AgentRegisteredEvent.InputTuple,
      AgentRegisteredEvent.OutputTuple,
      AgentRegisteredEvent.OutputObject
    >;
    AgentRegistered: TypedContractEvent<
      AgentRegisteredEvent.InputTuple,
      AgentRegisteredEvent.OutputTuple,
      AgentRegisteredEvent.OutputObject
    >;

    "TaskCompleted(uint256,address,uint256)": TypedContractEvent<
      TaskCompletedEvent.InputTuple,
      TaskCompletedEvent.OutputTuple,
      TaskCompletedEvent.OutputObject
    >;
    TaskCompleted: TypedContractEvent<
      TaskCompletedEvent.InputTuple,
      TaskCompletedEvent.OutputTuple,
      TaskCompletedEvent.OutputObject
    >;

    "TaskCreated(uint256,string,uint256,uint256,uint8)": TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;
    TaskCreated: TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;

    "TaskVerified(uint256,address)": TypedContractEvent<
      TaskVerifiedEvent.InputTuple,
      TaskVerifiedEvent.OutputTuple,
      TaskVerifiedEvent.OutputObject
    >;
    TaskVerified: TypedContractEvent<
      TaskVerifiedEvent.InputTuple,
      TaskVerifiedEvent.OutputTuple,
      TaskVerifiedEvent.OutputObject
    >;
  };
}
